datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
<<<<<<< HEAD
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      UserRole
  books     Book[]    @relation("UserBooks")
  borrows   Borrow[]
}
model Author {
  id        Int       @id @default(autoincrement())
=======
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      String
  books     Book[]    @relation("UserBooks")
  borrows   Borrow[]
}

model Author {
  id        String    @id @default(uuid())
>>>>>>> crud library-typescript
  name      String    @unique
  books     Book[]
}

model Category {
<<<<<<< HEAD
  id        Int       @id @default(autoincrement())
=======
  id        String    @id @default(uuid())
>>>>>>> crud library-typescript
  name      String    @unique
  books     Book[]
}

model Book {
<<<<<<< HEAD
  id         Int       @id @default(autoincrement())
  title      String
  authorId   Int
  categoryId Int
  qty        Int       @default(0)
  createdBy  Int?      // Ubah menjadi nullable
=======
  id         String    @id @default(uuid())
  title      String
  authorId   String
  categoryId String
  qty        Int       @default(0)
  createdBy  String?   // Ubah menjadi nullable
>>>>>>> crud library-typescript
  author     Author    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user       User?     @relation(fields: [createdBy], references: [id], onDelete: Cascade, name: "UserBooks")
  borrows    Borrow[]
}

model Borrow {
<<<<<<< HEAD
  id         Int       @id @default(autoincrement())
  userId     Int
  bookId     Int
=======
  id         String    @id @default(uuid())
  userId     String
  bookId     String
>>>>>>> crud library-typescript
  borrowDate DateTime
  returnDate DateTime?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  book       Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

enum UserRole {
  admin
  user
}
